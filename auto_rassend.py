#!/usr/bin/env python
# -*- coding: utf-8 -*-

from vk_messages import MessagesAPI
from random import randint
from time import sleep
from vk_messages.utils import get_random
import os

auth_data = {
'login': '',
'passwd': ''
}

def check_auth():
    if not os.path.exists('auth_data.log'):
        auth_data['login'] = input('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ')
        auth_data['passwd'] = input('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ')
        try:
            messages = MessagesAPI(login = auth_data['login'], password = auth_data['passwd'])
            with open('auth_data.log', 'w') as file:
                file.write(auth_data['login'] + '|' + auth_data['passwd'])
            print('–î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã')
            trigger = True
        except:
            trigger = False
            print('–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ ...')
    else:
        with open("auth_data.log", 'r') as file:
            trigger = True
            for line in file:
                auth_data['login'] = line.split("|")[0]
                auth_data['passwd'] = line.split("|")[1]
                print(auth_data['login'])
                print(auth_data['passwd'])
            print('–î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã')
    return trigger

def auto_send_30(trig):
    if trig:
        messages = MessagesAPI(login = auth_data['login'], password = auth_data['passwd'])
        users = messages.method('groups.getMembers', group_id = 'zertsalia')
        poslanie = '''
          –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!
          –ú–µ–Ω—è –∑–æ–≤—É—Ç ‚Äì –ì–æ—Ä–¥–µ–π –õ–µ—Å—Ç—Ä–∞—Ç–æ–≤ ‚Äì –∏ —è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å —Ä–æ–ª–µ–≤–æ–π –ø–æ –∫–Ω–∏–≥–µ '–ü–∞—Ä–¥—É—Å' –ï–≤–≥–µ–Ω–∏—è –ì–∞–≥–ª–æ–µ–≤–∞.
          –°–µ–π—á–∞—Å —É –Ω–∞—Å –æ–±—ä—è–≤–ª–µ–Ω –ø–æ–∏—Å–∫ –∫–∞–Ω–æ–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ —è —Ö–æ—Ç–µ–ª –±—ã —Ç–µ–±—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∏–º.
          –ï—Å–ª–∏ —è —Ç–µ–±—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å "+" –∏ —è —Ç–µ–±–µ –æ–±–æ –≤—Å—ë–º –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∂—É.
          –ï—Å–ª–∏ —Ç–µ–±–µ —ç—Ç–æ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —Ç–æ –ø—Ä–æ—à—É, –æ—Ç–ø—Ä–∞–≤—å "-".
          –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è ü•Ä
        '''
        sended = 0
        if not os.path.exists('data.log'):
            with open('data.log', 'w') as file:
                 pass
        for i in range(30):
            id = generate(users)
            with open('data.log', 'r') as file:
                pass
            sleep(1)
            try:
                messages.method('messages.send', peer_id = int(id), message = poslanie, random_id= get_random())
                print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                sended += 1
                with open('data.log', 'a') as file:
                    file.write(str(id) + '\n')
            except:
                print("–õ–∏—á–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞,  " + str(id))
        print('–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ' + str(sended))

def generate(users):
    k = randint(0, 1000)
    id = users['items'][k]
    lines = 0
    pp = 0
    with open('data.log', 'r') as data:
        for line in data:
            lines += 1
    while pp < lines:
        with open('data.log', 'r') as data:
           for line in data:
                if line == id:
                    pp = 0
                    print('–û–±—Ä–∞—Ä—É–∂–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ!')
                    k = randint(0, 1000)
                    id = users['items'][k]
                    print(id)
                else:
                    pp += 1
    return id
trigger = check_auth()
auto_send_30(trigger)

